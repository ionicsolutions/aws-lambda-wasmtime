#!/bin/sh

set -euo pipefail

FILE="$LAMBDA_TASK_ROOT/$_HANDLER"

# Find wasmtime
if [ -f "$LAMBDA_TASK_ROOT/wasmtime" ]; then
  # Use wasmtime packaged with the function code
  WASMTIME="$LAMBDA_TASK_ROOT"/wasmtime
elif [ -f "/opt/bin/wasmtime" ]; then
  # Use wasmtime provided through a Lambda layer
  WASMTIME="/opt/bin/wasmtime"
else
  # Report an initialization error to the AWS Lambda runtime API
  ERROR="{\"error\": \"Did not find wasmtime in the function package or Lambda layer.\", \"errorType\" : \"InvalidFunctionException\"}"
  curl "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/init/error" -d "$ERROR" --header "Lambda-Runtime-Function-Error-Type: Unhandled"
  exit 1
fi

# Process events in an infinite loop
while true
do
  HEADERS="$(mktemp)"

  # Get an event. The HTTP request will block until one is received
  EVENT_DATA=$(curl -sS -LD "$HEADERS" "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

  # Extract request ID by scraping response headers received above
  REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)

  # Run the WebAssembly module
  RESPONSE=$($WASMTIME -C cache=n "$FILE" "$EVENT_DATA")

  # Send the response back to the AWS Lambda runtime API
  curl "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response"  -d "$RESPONSE"
done
